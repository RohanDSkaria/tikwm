name: Release
on:
  push:
    tags:
      - 'v*'

jobs:
  build-main:
    name: Build for Linux & Windows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'
          cache: true

      - name: Install C cross-compilers
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Sync Go Modules
        run: go mod vendor

      - name: Build all targets
        run: |
          TARGETS="linux/amd64 linux/arm64"
          for target in $TARGETS; do
            IFS='/' read -r GOOS GOARCH <<< "$target"
            echo "--- Building for $GOOS/$GOARCH ---"

            # Set the C compiler based on the target
            export CGO_ENABLED=1
            export GOOS=$GOOS
            export GOARCH=$GOARCH
            
            if [ "$GOOS" = "linux" ] && [ "$GOARCH" = "arm64" ]; then
              export CC=aarch64-linux-gnu-gcc
            elif [ "$GOOS" = "windows" ] && [ "$GOARCH" = "amd64" ]; then
              export CC=x86_64-w64-mingw32-gcc
            elif [ "$GOOS" = "windows" ] && [ "$GOARCH" = "arm64" ]; then
              export CC=aarch64-w64-mingw32-gcc
            else
              # For the native target (linux/amd64), we don't need to set CC
              unset CC
            fi

            go build -v -mod=vendor -ldflags="-s -w -X main.version=${GITHUB_REF_NAME}" -o "dist/tikwm_${GOOS}_${GOARCH}/tikwm" ./tools/tikwm
          done

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-main
          path: dist/

  build-mac:
    name: Build for macOS
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'
          cache: true
      - name: Sync Go Modules
        run: go mod vendor
      - name: Build all targets
        run: |
          TARGETS="darwin/amd64 darwin/arm64"
          for target in $TARGETS; do
            IFS='/' read -r GOOS GOARCH <<< "$target"
            echo "--- Building for $GOOS/$GOARCH ---"
            CGO_ENABLED=1 GOOS=$GOOS GOARCH=$GOARCH go build -v -mod=vendor -ldflags="-s -w -X main.version=${GITHUB_REF_NAME}" -o "dist/tikwm_${GOOS}_${GOARCH}/tikwm" ./tools/tikwm
          done
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-mac
          path: dist/

  publish:
    name: Publish Release
    needs: [build-main, build-mac]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: Prepare release assets
        run: |
          mkdir -p release_assets
          for dir in dist/*; do
            if [ -d "$dir" ]; then
              target_name=$(basename "$dir")
              goos=$(echo "$target_name" | cut -d'_' -f2)
              goarch=$(echo "$target_name" | cut -d'_' -f3)
              
              if [ "$goarch" = "amd64" ]; then arch_name="x86_64"; else arch_name="$goarch"; fi
              
              exe_name="tikwm"
              archive_name="tikwm_${goos}_${arch_name}"
              
              if [ "$goos" = "windows" ]; then
                mv "$dir/tikwm" "$dir/tikwm.exe"
                exe_name="tikwm.exe"
                archive_name="${archive_name}.zip"
                (cd "$dir" && zip "$archive_name" "$exe_name")
                mv "$dir/$archive_name" ../release_assets/
              else
                archive_name="${archive_name}.tar.gz"
                (cd "$dir" && tar -czf "$archive_name" "$exe_name")
                mv "$dir/$archive_name" ../release_assets/
              fi
            fi
          done
      - name: Generate checksums
        run: (cd release_assets && sha256sum * > checksums.txt)
      - name: Get Previous Tag
        id: get_previous_tag
        run: |
          PREVIOUS_TAG=$(git tag --sort=v:refname | tail -n 2 | head -n 1)
          if [ "${{ github.ref_name }}" = "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "tag=${PREVIOUS_TAG}" >> $GITHUB_OUTPUT
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          body: |
            
            ---
            ## Full Changelog
            https://github.com/${{ github.repository }}/compare/${{ steps.get_previous_tag.outputs.tag }}...${{ github.ref_name }}
          files: release_assets/*
